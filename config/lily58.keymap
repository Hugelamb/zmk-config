/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

 /* 
 Much of the below mapping was taken from work done by urob,
 caksoylar and other brilliant people from the ZMK community.
 urob's zmk repository: https://github.com/urob/zmk-config
 caksoylar's zmk repository (stock branch):https://github.com/caksoylar/zmk-config/tree/stock/
 
 
 
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
//#include <behaviours/mouse_keys.dtsi>

#include "../zmk-helpers/helper.h"
#include "map58to34keys.h"
// Key defines for HRM behaviours
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH1 LH0 RH0 RH1                                              // thumb keys

// Layer defines
#define DEF 0
#define COL 1
#define SYM 2       // Commonly used symbols, such as theta, omega, beta, alpha, etc
#define NAV 3       // arrow keys, PGUP/PGDN, back, forward, window swappers, 
#define FUN 4       
// #define SYS 5
// #define MOU 6

// Desktop window management and tab nav shortcuts
#define D_LT   LC(LG(LEFT))     // move desktop left
#define D_RT   LC(LG(RIGHT))    // move desktop right       
#define TAB_RT LC(TAB)          // tab switcher forward/right
#define TAB_LT LC(LS(TAB))      // tab switcher left/back
//Extra key binds
#define SWP_POS LB3
#define PWR_ON &ext_power EP_ON
#define PWR_OFF &ext_power EP_OFF

// Custom includes

#include "combos.dtsi"
#include <dt-bindings/zmk/outputs.h>

//Global settings
#define QUICK_TAP_MS 175
// behaviour customizations

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <200>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC DEL N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

// Home row mods macros
    // left hand hrms
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
    )

ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
    )


/ {
    cond_layers {
        compatible = "zmk,conditional-layers";
        // Define FUN layer as tri-state
        func_tristate {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };

    behaviors {
        // // Swapper function (may require zmk PR#1366)
        // swapper: swapper {
        //     compatible = "zmk,behaviour-tri-state";
        //     #binding-cells = <0>;
        //     bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
        //     ignored-key-positions = <SWP_POS>; 
        // };
    // tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
        bs_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <MOD_RSFT>;
        };


    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "DEF";
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
// |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |
            bindings = <
&none       &none       &none       &none           &none           &none                                       &none           &none           &none       &none           &none           &none
&none       &kp Q       &kp W       &kp E           &kp R           &kp T                                       &kp Y           &kp U           &kp I       &kp O           &kp P           &none
&none       &hml LGUI A &hml LALT S &hml LCTRL D    &hml LSHFT F    &kp G                                       &kp H       &hmr RSHFT J    &hmr LCTRL K    &hmr LALT L &hmr LGUI SEMI  &none
&none       &kp Z       &kp X       &kp C           &kp V           &kp B           &none           &none       &kp N           &kp M           &kp COMMA   &kp DOT         &kp FSLH        &none
                                    &none           &none           &mt LCTRL ESC   &lt NAV SPACE   &lt SYM RET &bs_del         &none           &none
            >;
        };

        cole_layer {
            display-name = "COL";
			bindings = <
&none       &none       &none       &none       &none       &none                                       &none       &none       &none       &none       &none           &none
&none       &kp Q       &kp W       &kp F       &kp P       &kp B                                       &kp J       &kp L       &kp U        &kp Y       &kp SEMI        &none
&none       &mt LGUI A  &mt LALT R  &mt LCTRL S &mt LSHFT T &kp G                                       &kp M       &mt RSHFT N &mt LCTRL E &mt LALT I  &mt LGUI O      &none 
&none       &kp Z       &kp X       &kp C       &kp D       &kp V           &none           &none       &kp K       &kp H       &kp COMMA   &kp DOT     &kp FSLH        &none
                                    &none       &none       &mt LCTRL ESC   &lt NAV SPC     &lt SYM RET &bs_del     &none       &none
			>;
        };

        symbol_layer {
            display-name = "SYM";
            bindings = <
&none       &none       &none       &none       &none       &none                                       &none       &none       &none       &none       &none           &none
&none       &kp EXCL    &kp AT      &kp HASH    &kp DLLR    &kp PRCNT                                   &kp SLASH   &kp N7      &kp N8      &kp N9      &kp APOSTROPHE       &none       
&none       &kp PLUS    &kp EQUAL   &kp UNDER   &kp MINUS   &kp CARET                                   &kp N0      &kp N4      &kp N5      &kp N6      &kp DOT         &none
&none       &mo FUN     &kp PIPE     &kp STAR    &kp AMPS    &none           &none           &none       &kp SEMI    &kp N1      &kp N2      &kp N3      &kp BSLH       &none
                                    &none       &none       &kp BSPC        &trans          &trans      &bs_del    &none   &none                               
            >;
        };

        nav_layer {
            display-name = "NAV";
// ------------------------------------------------------------------------------------------------------------
// | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
// |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
// |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
// |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
//                     |      |      |      |        |  |       |      |       |       |
            bindings = <
&trans      &trans      &trans      &trans          &trans          &trans                                  &trans      &trans       &trans       &trans        &trans          &trans
&trans      &kp LA(F4)  &kp TAB_LT  &kp TAB_RT      &kp LC(F4)      &kp C_VOL_UP                            &kp INS     &kp PG_DN    &kp UP       &kp PG_UP     &kp C_AL_CALC   &trans
&trans      &kp LGUI    &kp LALT    &kp LCTRL       &mt LSHFT TAB   &kp C_VOL_DN                            &kp HOME    &kp LEFT     &kp DOWN     &kp RIGHT     &kp END         &trans
&trans      &none       &none       &none           &kp LS(INS)     &kp C_PP        &trans      &trans      &kp DEL     &kp C_PREV   &kp C_NEXT   &none         &none           &none
                                    &trans          &trans          &trans          &trans      &trans      &trans      &trans      &trans
            >;
        };
        fun_layer {
            display-name = "FUN";
            bindings = <
&trans      &trans      &trans      &trans      &trans      &trans                              &trans          &trans          &trans              &trans              &trans          &trans
&trans      &kp F1      &kp F2      &kp F3      &kp F4      &kp F5                              &out OUT_USB    &out OUT_BLE    &to DEF             &to COL             &none           &none
&trans      &kp F6      &kp F7      &kp F8      &kp F9      &kp F10                             &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2        &bt BT_SEL 3        &bt BT_SEL 4    &none
&trans      &none       &kp D_LT    &kp D_RT    &kp F11     &kp F12     &none       &none       &none           &kp CAPS        &ext_power EP_ON    &ext_power EP_OFF   &none           &none
                                    &trans      &trans      &none       &trans      &trans      &trans          &trans          &kp SPACE 
            >;

        };

//         sys_layer {
//             display-name = "SYS";
//             bindings = <
// &kp LA(F4)  &kp TAB_LT  &kp TAB_RT      &kp LC(F4)      &kp C_VOL_UP            &kp INS         &kp PG_DN    &kp UP       &kp PG_UP    &kp C_AL_CALC 
// &kp LCTRL   &kp LGUI    &kp LALT        &mt LSHFT TAB   &kp C_VOL_DN            &kp HOME        &kp LEFT     &kp DOWN     &kp RIGHT    &kp END       
// &none       &none       &none           &kp LS(INS)     &kp C_PP                &none           &kp DEL      &kp C_PREV   &kp C_NEXT   &none         
//                                         &none           &trans                  &trans          &kp SPACE 
//             >;

//         };
    };
};
